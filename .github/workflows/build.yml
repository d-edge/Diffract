name: .NET Core
on:
  push:
  pull_request:
  release:
    types:
      - published
env:
  # Stop wasting time caching packages
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  # Disable sending usage data to Microsoft
  DOTNET_CLI_TELEMETRY_OPTOUT: true
  # Project name to pack and publish
  PROJECT_NAME: Diffract
  # GitHub Packages Feed settings
  GITHUB_FEED: https://nuget.pkg.github.com/d-edge/
  GITHUB_USER: tarmil
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  # Official NuGet Feed settings
  NUGET_FEED: https://api.nuget.org/v3/index.json
  NUGET_KEY: ${{ secrets.NUGET_KEY }}
jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-latest, windows-latest, macos-latest ]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 8.0.100
      - name: Paket restore
        run: |
          dotnet tool restore
          dotnet paket install
      - name: Restore
        run: dotnet restore
      - name: Build
        run: dotnet build -c Release --no-restore
      - name: Test
        run: dotnet test -c Release
      - name: Strip HTML from README
        uses: Tarmil/strip-markdown-html@v0.3
        with:
          input-path: README.md
          output-path: src/Diffract/README.md
      - name: Pack
        if: matrix.os == 'ubuntu-latest'
        run: |
          if [ "$GITHUB_REF_TYPE" = "tag" ]; then
            arrTag=(${GITHUB_REF//\// })
            VERSION="${arrTag[2]}"
            echo Version: $VERSION
            VERSION="${VERSION//v}"
            echo Clean Version: $VERSION
          else
            git fetch --prune --unshallow --tags --quiet
            latestTag=$(git describe --tags --abbrev=0 2>/dev/null || echo 0.0.1)
            runId=$GITHUB_RUN_ID
            VERSION="${latestTag//v}-build.${runId}"
            echo Non-release version: $VERSION
          fi
          dotnet paket pack --symbols --version $VERSION nupkg
      - name: Upload Artifact
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: nupkg
          path: nupkg
  prerelease:
    needs: build
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: nupkg
      - name: Push to GitHub Feed
        run: |
          for f in *.nupkg
          do
            curl -vX PUT -u "$GITHUB_USER:$GITHUB_TOKEN" -F package=@$f $GITHUB_FEED
          done
  deploy:
    needs: build
    if: github.event_name == 'release'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Setup .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 8.0.100
      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: nupkg
      - name: Push to GitHub Feed
        run: |
          for f in *.nupkg
          do
            curl -vX PUT -u "$GITHUB_USER:$GITHUB_TOKEN" -F package=@$f $GITHUB_FEED
          done
      - name: Push to NuGet Feed
        run: dotnet nuget push *.nupkg --source $NUGET_FEED --skip-duplicate --api-key $NUGET_KEY
